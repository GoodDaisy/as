// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class testArrayOfUint8ArrayHelper {
  static encode(message: testArrayOfUint8ArrayHelper, writer: Writer): void {
    const arg1 = message.arg1;
    if (arg1.length !== 0) {
      for (let i: i32 = 0; i < arg1.length; ++i) {
        writer.uint32(10);
        writer.bytes(arg1[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): testArrayOfUint8ArrayHelper {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new testArrayOfUint8ArrayHelper();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.arg1.push(reader.bytes());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  arg1: Array<Uint8Array>;

  constructor(arg1: Array<Uint8Array> = []) {
    this.arg1 = arg1;
  }
}

export function encodetestArrayOfUint8ArrayHelper(
  message: testArrayOfUint8ArrayHelper
): Uint8Array {
  return Protobuf.encode(message, testArrayOfUint8ArrayHelper.encode);
}

export function decodetestArrayOfUint8ArrayHelper(
  buffer: Uint8Array
): testArrayOfUint8ArrayHelper {
  return Protobuf.decode<testArrayOfUint8ArrayHelper>(
    buffer,
    testArrayOfUint8ArrayHelper.decode
  );
}
